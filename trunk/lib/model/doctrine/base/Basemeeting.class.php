<?php

/**
 * Basemeeting
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $hash
 * @property string $title
 * @property string $description
 * @property integer $uid
 * @property boolean $closed
 * @property timestamp $date_del
 * @property timestamp $date_end
 * @property boolean $notif
 * @property user $user
 * @property Doctrine_Collection $meeting_dates
 * 
 * @method string              getHash()          Returns the current record's "hash" value
 * @method string              getTitle()         Returns the current record's "title" value
 * @method string              getDescription()   Returns the current record's "description" value
 * @method integer             getUid()           Returns the current record's "uid" value
 * @method boolean             getClosed()        Returns the current record's "closed" value
 * @method timestamp           getDateDel()       Returns the current record's "date_del" value
 * @method timestamp           getDateEnd()       Returns the current record's "date_end" value
 * @method boolean             getNotif()         Returns the current record's "notif" value
 * @method user                getUser()          Returns the current record's "user" value
 * @method Doctrine_Collection getMeetingDates()  Returns the current record's "meeting_dates" collection
 * @method meeting             setHash()          Sets the current record's "hash" value
 * @method meeting             setTitle()         Sets the current record's "title" value
 * @method meeting             setDescription()   Sets the current record's "description" value
 * @method meeting             setUid()           Sets the current record's "uid" value
 * @method meeting             setClosed()        Sets the current record's "closed" value
 * @method meeting             setDateDel()       Sets the current record's "date_del" value
 * @method meeting             setDateEnd()       Sets the current record's "date_end" value
 * @method meeting             setNotif()         Sets the current record's "notif" value
 * @method meeting             setUser()          Sets the current record's "user" value
 * @method meeting             setMeetingDates()  Sets the current record's "meeting_dates" collection
 * 
 * @package    rdvz
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class Basemeeting extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('meeting');
        $this->hasColumn('hash', 'string', 8, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '8',
             ));
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('description', 'string', 4000, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '4000',
             ));
        $this->hasColumn('uid', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('closed', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             ));
        $this->hasColumn('date_del', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('date_end', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('notif', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('user', array(
             'local' => 'uid',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('meeting_date as meeting_dates', array(
             'local' => 'id',
             'foreign' => 'mid'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}