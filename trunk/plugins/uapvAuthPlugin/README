
uapvAuthPlugin
==============

Le but de ce plugin est d'ajouter à une application symfony le support d'une authentification par un serveur CAS et d'une identification par un serveur LDAP. Ces deux briques sont toutefois paramètrables afin de rendre l'application facilement intégrable dans un autre environnement (méthodes d'authentification et/ou d'identification différentes).

Ce plugin est découpé en 3 parties :

* Un filtre appelé lorsque la page courante est sécurisée. Le CAS est utilisé à ce moment si nécessaire.
* Une classe utilisateur qui se charge du processus de création d'un utilisateur (création de la session > appel des différents `Builder`)
* Une ou plusieurs classe de création d'utilisation (`Builder`) à partir de différentes sources (LDAP, Base de données, etc). Ces classes renseignent les attributs des utilisateurs et configurent leurs autorisations.


Prérequis :
-----------

Installer les api php-ldap et les librairies pear requises pour phpCAS

En tant que root, tapper :

    [shell]
    aptitude install php5-ldap php5-curl php-pear && apache2ctl restart
    pear install pear/DB

Installation :
--------------

* Dans le cas d'une authentification CAS :

  * modifier le fichier `app/frontend/config/filters.yml`. Remplacer la ligne 'security: ~' par :

    [yml]
    security:
      class: uapvSecurityFilterCas
      param:
        type: security

  * Configurer le serveur CAS et LDAP (identification par défaut) dans `app/frontend/config/app.yml`

    [yml]
    all:
      cas_server:
        host: cas.univ-avignon.fr
        port: 443
        path:
       
      ldap_server:
        host: ldap.univ-avignon.fr
        port: 389
        basedn: dc=univ-avignon,dc=fr
        options: {<?php echo LDAP_OPT_PROTOCOL_VERSION ?>: 3}

* Dans le cas d'une authentification LDAP ou BDD on va utiliser le module `authentication`
  qui fourni les actions et formulaires de login/logout. Pour cela modifier le fichier
  `config/settings.yml` :

  [yml]
  all:
    .settings:
      enabled_modules: [default, authentication]

    .actions:
      login_module: authentication
      login_action: login


* Pour une *identification* LDAP configurer l'accès au LDAP si ce n'est pas déjà fait

  [yml]
  all:
    ldap_server:
      host: ldap.univ-avignon.fr
      port: 389
      basedn: dc=univ-avignon,dc=fr
      options: {<?php echo LDAP_OPT_PROTOCOL_VERSION ?>: 3}

* Pour une identification BDD, préciser les paramètres nécessaires pour accéder
  à la base.

  [app.yml]
  all:
    bdd_server:
      host: <hostname> # (ex : localhost, my_db.org...)
      pdo: <driver bdd> # (ex: mysql, pgsql...)
      dbname: <nom bdd>
      username: # (doit avoir au minimum un droit d'accès en lecture sur la base)
      password:
    
    bdd_info:
      user_pass_encrypt: <[ md5 | sha1 | nothing ]> 
      # type d'algorithme de cryptage utilisé pour encoder les mots de passe. Valeurs
      # acceptées : md5, sha1, ou rien si pas de cryptage.
      user_table_name: <nom de la table utilisateurs>
      user_login_field: <nom du champ de login>
      user_pass_field: <nom du champ de mot de passe>


* Configurer les pages où les utilisateurs doivent être authentifiés.

  Pour sécuriser l'action "mon_action" du module "mon_module"  (`app/frontend/mon_module/config/security.yml`):

    [yml]
    mon_action:
      is_secure: on

  Pour sécuriser toute l'application (`app/frontend/config/security.yml`) :

    [yml]
    default:
      is_secure: on
    
  Plus d'infos sur la [documentation symfony](http://www.symfony-project.org/book/1_2/06-Inside-the-Controller-Layer#chapter_06_action_security).

* Faire dériver la classe utilisateur de `uapvBasicSecurityUser` (par défaut `apps/frontend/lib/myUser.class.php`)

  [php]
  class myUser extends uapvBasicSecurityUser { // ...

* Pour symfony >= 1.3 activer le plugin dans 'config/ProjectConfiguration.class.php' :

  [php]
  // ...
  class ProjectConfiguration extends sfProjectConfiguration
  {
    public function setup()
    {
      // ...
      $this->enablePlugins( ... , 'uapvAuthPlugin');
      // ... 

* symfony cache:clear

* That's all folks !

Utilisation :
-------------

Les données du profil sont accessibles ainsi :

* coté controleur :
  
  [php]
  $this->getUser()->getProfileVar('name');

* coté vue :
  
  [php]
  $sf_user->getProfileVar('name');

Configuration avancée :
-----------------------

* Personnalisation de la construction du profil d'un utilisateur

  * Modifier le fichier `app/frontend/config/app.yml`

      [yml]
      all:
        profile:
          builder_class: uapvProfileBuilderPerso

  * Créer la classe correspondante (dans le répertoire lib par exemple) :
    
      [php]
      <?php
      class uapvProfileBuilderPerso implements uapvProfileBuilderInterface {
        public static function buildProfile (&$profile, $id) {
          $data = // Récupérer les données depuis une source quelconque
          $profile->add ($data);
        }
      }

    Pour un exemple de classe, voir le fichier plugins/uapvAuthPlugin/lib/uapvProfileBuilderLdap.class.php

  * Rechercharger le cache `symfony cache:clear`

* Personnalisation de la configuration d'un utilisateur (afin d'ajouter des "credentials" par exemple) :
  Surcharger la fonction `configure`, elle sera automatiquement appelée lors de la construction de l'object à la connection de l'utilisateur

  [php]
  class myUser extends uapvBasicSecurityUser {
    // ...
    public function configure () {
      // exemple :
      if ($this->getProfileVar ('affiliation') == 'student')
        $this->addCredential ('student');
    }
  }

* Personnaliser la classe du profil:

  * Modifier le paramètre de configuration app_profile_class
  * Créer une classe qui surcharge `plugins/uapvAuthPlugin/lib/uapvBasicProfile.class.php`
  * Recharger le cache

* Utiliser l'action de déconnection fourni avec le plugin

  Modifier le fichier `config/settings.yml` afin d'ajouter le module `authentication` :

    [yml]
    all:
      .settings:
        enabled_modules: [default, authentication]

  l'url de déconnection est alors : /authentication/logout

  Il est possible de passer le paramètre 'redirect' contenant l'url du service vers lequel le CAS redirigera l'utilisateur une fois celui déconnecté.

* Force l'authentification (et le passage par la fonction myUser->configure ()) à chaque requête (en mode dev uniquement) : 
  Fichier `app.yml`:
 
    [yml]   
    dev:
      cas_server:
        force_authentication: true
   
  
* Activer le debug de la lib phpCAS (voir le fichier /tmp/phpCAS.log) :
  Fichier `app.yml`:
 
    [yml]   
    dev:
      cas_server:
        debug: true
  
